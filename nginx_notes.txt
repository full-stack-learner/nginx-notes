Nginx Notes

"Lets run nginx image on docker container"

> docker images

REPOSITORY            TAG          IMAGE ID       CREATED        SIZE
centos-node           latest       866966f321bd   4 months ago   272MB
traefik               1.7-alpine   6ec9aa2ea843   4 months ago   82.4MB
ghost                 latest       2240fe110211   4 months ago   433MB
nginx                 latest       ae2feff98a0c   4 months ago   133MB
jwilder/nginx-proxy   latest       509ff2fb81dd   6 months ago   165MB

> docker ps

NAMES
11b1066991a4   nginx     "/docker-entrypoint.…"   3 seconds ago   Up 2 seconds   0.0.0.0:80->80/tcp   mynginx1


> docker run --name mynginx1 -p 80:80 -d nginx

11b1066991a4e46d7e7cba432c777b9809d9c15f712f6819575e57f57ab25d08

> docker exec -it mynginx1 /bin/bash

# ls

bin   dev		   docker-entrypoint.sh  home  lib64  mnt  proc  run   srv  tmp  var
boot  docker-entrypoint.d  etc			 lib   media  opt  root  sbin  sys  usr

# exit

> docker stop mynginx1
> docker ps 

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

> docker pull ubuntu
> docker run -i -t ubuntu /bin/bash
# ls
# exit
> docker ps -a

CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                      PORTS     NAMES
0f02b652fbdf   ubuntu    "/bin/bash"   46 seconds ago   Exited (0) 13 seconds ago             keen_cori

> docker start -i [container_name]

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

> docker pull centos
> docker run -it -d -p 80:80 centos /bin/bash
> docker container ps

CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS                               NAMES
41082c283450   centos    "/bin/bash"   9 seconds ago   Up 6 seconds   0.0.0.0:80->80/tcp, :::80->80/tcp   zen_williamson

> docker exec -it [container_id] bash
# ls

# rpm -qa | grep nginx
# yum -y install epel-release
# yum -y install nginx
# service nginx status
# service nginx start

# service nginx stop
# service nginx restart

# ls
# cd /etc/nginx/
# ls

total 76
drwxr-xr-x 2 root root 4096 Oct  7  2019 conf.d
drwxr-xr-x 2 root root 4096 Oct  7  2019 default.d
-rw-r--r-- 1 root root 1077 Oct  7  2019 fastcgi.conf
-rw-r--r-- 1 root root 1077 Oct  7  2019 fastcgi.conf.default
-rw-r--r-- 1 root root 1007 Oct  7  2019 fastcgi_params
-rw-r--r-- 1 root root 1007 Oct  7  2019 fastcgi_params.default
-rw-r--r-- 1 root root 2837 Oct  7  2019 koi-utf
-rw-r--r-- 1 root root 2223 Oct  7  2019 koi-win
-rw-r--r-- 1 root root 5170 Oct  7  2019 mime.types
-rw-r--r-- 1 root root 5170 Oct  7  2019 mime.types.default
-rw-r--r-- 1 root root 2469 Oct  7  2019 nginx.conf
-rw-r--r-- 1 root root 2656 Oct  7  2019 nginx.conf.default
-rw-r--r-- 1 root root  636 Oct  7  2019 scgi_params
-rw-r--r-- 1 root root  636 Oct  7  2019 scgi_params.default
-rw-r--r-- 1 root root  664 Oct  7  2019 uwsgi_params
-rw-r--r-- 1 root root  664 Oct  7  2019 uwsgi_params.default
-rw-r--r-- 1 root root 3610 Oct  7  2019 win-utf

# vi nginx.conf

# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$http_x_real_ip;"';

    log_format master "$remote_addr" - "$status";

    access_log  /var/log/nginx/access.log  main;
    #access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    gzip on;
    gzip_types text/plain text/css text/xml text/javascript;
    gzip_disable "MSIE [1-6]\.";
    gzip_comp_level 9;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  _;
        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location / {
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }

# Settings for a TLS enabled server.
#
#    server {
#        listen       443 ssl http2 default_server;
#        listen       [::]:443 ssl http2 default_server;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
#        ssl_certificate "/etc/pki/nginx/server.crt";
#        ssl_certificate_key "/etc/pki/nginx/private/server.key";
#        ssl_session_cache shared:SSL:1m;
#        ssl_session_timeout  10m;
#        ssl_ciphers PROFILE=SYSTEM;
#        ssl_prefer_server_ciphers on;
#
#        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;
#
#        location / {
#        }
#
#        error_page 404 /404.html;
#            location = /40x.html {
#        }
#
#        error_page 500 502 503 504 /50x.html;
#            location = /50x.html {
#        }
#    }

}

# ps -ef --forest | grep nginx

root       211    95  0 10:51 pts/1    00:00:00  \_ grep --color=auto nginx

# cat /proc/cpuinfo

processor	: 0
vendor_id	: GenuineIntel
cpu family	: 6
model		: 142
model name	: Intel(R) Core(TM) i5-8257U CPU @ 1.40GHz
stepping	: 10
cpu MHz		: 1400.000
cache size	: 6144 KB
physical id	: 0
siblings	: 1
core id		: 0
cpu cores	: 1
apicid		: 0
initial apicid	: 0
fpu		: yes
fpu_exception	: yes
cpuid level	: 22
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht pbe syscall nx pdpe1gb lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid pni pclmulqdq dtes64 ds_cpl ssse3 sdbg fma cx16 xtpr pcid sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch fsgsbase bmi1 avx2 bmi2 erms xsaveopt arat
bugs		: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit srbds
bogomips	: 2799.89
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

processor	: 1
vendor_id	: GenuineIntel
cpu family	: 6
model		: 142
model name	: Intel(R) Core(TM) i5-8257U CPU @ 1.40GHz
stepping	: 10
cpu MHz		: 1400.000
cache size	: 6144 KB
physical id	: 1
siblings	: 1
core id		: 0
cpu cores	: 1
apicid		: 1
initial apicid	: 1
fpu		: yes
fpu_exception	: yes
cpuid level	: 22
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht pbe syscall nx pdpe1gb lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid pni pclmulqdq dtes64 ds_cpl ssse3 sdbg fma cx16 xtpr pcid sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch fsgsbase bmi1 avx2 bmi2 erms xsaveopt arat
bugs		: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit srbds
bogomips	: 2796.27
clflush size	: 64
cache_alignment	: 64
address sizes	: 39 bits physical, 48 bits virtual
power management:

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

# apt-get update
# apt-get install nginx
# apt-get install ufw

# ufw enable
# ufw app list

Available applications:
  Nginx Full
  Nginx HTTP
  Nginx HTTPS

# ufw allow 'Nginx HTTP'
# ufw default deny
# ufw status

To                         Action      From
--                         ------      ----
OpenSSH                    ALLOW       Anywhere                  
Nginx HTTP                 ALLOW       Anywhere                  
OpenSSH (v6)               ALLOW       Anywhere (v6)             
Nginx HTTP (v6)            ALLOW       Anywhere (v6)

# apt-get install systemctl

# systemctl status nginx

● nginx.service - A high performance web server and a reverse proxy server
   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)
   Active: active (running) since Fri 2018-04-20 16:08:19 UTC; 3 days ago
     Docs: man:nginx(8)
 Main PID: 2369 (nginx)
    Tasks: 2 (limit: 1153)
   CGroup: /system.slice/nginx.service
           ├─2369 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;
           └─2380 nginx: worker process

# systemctl start nginx
# systemctl restart nginx
# systemctl reload nginx
# systemctl stop nginx

# ps faux

# cd var/log/nginx/
# ls

access.log  error.log

# tail -f access.log

# cd /etc/nginx/conf.d
# ls

# apt-get install net-tools
# netstat -ntlp

Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -                   
tcp6       0      0 :::80                   :::*                    LISTEN      - 

# cd /var/www/html/
# ls

# cd /etc/nginx/conf.d
# vim default.conf

server {
        listen 80;
        server_name example.com;

        location / {
                root /var/www/html/;
                index index.html index.htm;
        }
}

# curl -I 127.0.0.7

HTTP/1.1 200 OK
Server: nginx/1.18.0 (Ubuntu)
Date: Fri, 14 May 2021 06:53:07 GMT
Content-Type: text/html
Content-Length: 323
Last-Modified: Fri, 14 May 2021 06:48:46 GMT
Connection: keep-alive
ETag: "609e1d4e-143"
Accept-Ranges: bytes

# curl 127.0.0.7

<html>
	<head><title>Nginx</title></head>
	<body>
		<h1>Nginx Page</h1>
		<p>This simply means that the relevant package net-tools which includes netstat executable is not installed, thus missing. The package net-tools may not be installed on your system by default so you need to install it manually.</p>
	</body>
</html>

# ifconfig

eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255
        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)
        RX packets 53357  bytes 71703354 (71.7 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 22859  bytes 1276034 (1.2 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 50  bytes 5338 (5.3 KB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 50  bytes 5338 (5.3 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

> docker run -it -d -p 8080:80 ubuntu-nginx /bin/bash
> docker ps

CONTAINER ID   IMAGE          COMMAND       CREATED         STATUS         PORTS                                   NAMES
7a22eefa8124   ubuntu-nginx   "/bin/bash"   7 seconds ago   Up 5 seconds   0.0.0.0:8080->80/tcp, :::8080->80/tcp   brave_elbakyan
5994e5c9b025   ubuntu         "/bin/bash"   2 hours ago     Up 2 hours     0.0.0.0:80->80/tcp, :::80->80/tcp       vibrant_roentgen

> docker exec -it 7a22eefa8124 /bin/bash 
> ifconfig

root@7a22eefa8124:/# ifconfig
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.3  netmask 255.255.0.0  broadcast 172.17.255.255
        ether 02:42:ac:11:00:03  txqueuelen 0  (Ethernet)
        RX packets 8  bytes 656 (656.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

"Reverse Proxy"

User -> Server with 80 -> Server with 8080

"Make content different to know more exactly"

# ifconfig

# cd /etc/nginx/conf.d/
# nano default.conf

server {
        listen 80;
        server_name example.com;

        #location / {
        #       root /var/www/html/;
        #       index index.html index.htm;
        #}

        location / {
                proxy_pass http://172.17.0.3;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
        }
}

# nginx -t
# service nginx restart

"Curl to server with port 80"

"TCP dump from terminal of server with port 8080"

# tcpdump -A -vvvv -s 9999 -i eth0 port 80 > /tmp/headers

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

"Load Balancing"

upstream backend {
    server [server_1_ip_address];
    server [server_2_ip_address];
    server 172.17.0.3 max_fails=2 fail_timeout=30s;
}

server {
        listen 80;
        server_name example.com;

        #location / {
        #       root /var/www/html/;
        #       index index.html index.htm;
        #}

        location / {
                proxy_pass http://backend;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
        }
}

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

upstream backend {
    server [server_1_ip_address];
    zone backend 64k;
}

match server_test {
    status 200-399;
    #body !~ maintenence;
    body ~ "Welcome to Nginx";
}

server {
        listen 80 default_server;
        server_name _;

        #location / {
        #       root /var/www/html/;
        #       index index.html index.htm;
        #}

        location / {
                proxy_pass http://backend;
                health_check interval=10 uri=/test.txt match=server_test;
        }
}

# tail -f /var/log/nginx/access.log

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

upstream backend {
    server [server_1_ip_address];
    server [server_2_ip_address] weight=2;
}

server {
        listen 80;
        server_name example.com;

        #location / {
        #       root /var/www/html/;
        #       index index.html index.htm;
        #}

        location / {
                proxy_pass http://backend;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
        }
}

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

upstream backend {
    least_conn;
    server [server_1_ip_address];
    server [server_2_ip_address];
}

server {
        listen 80;
        server_name example.com;

        #location / {
        #       root /var/www/html/;
        #       index index.html index.htm;
        #}

        location / {
                proxy_pass http://backend;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
        }
}

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

"Static Assets"

server {
        server_name example.com;

        location / {
                proxy_pass http://[server_ip_address];
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
        }

        location ~* \.(css|js|jpeg|JPG|png) {
            root /var/www/assets;
            try_files $uri $uri/;
        }
}

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

"Logging"

server {
        server_name example.com;
        access_log /var/log/nginx/example.log main;
        listen 80;

        location / {
                root /var/www/html/example;
        }
}

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

"HTTP Referer, Compression"

# curl --header "Accept-Language: en" example.com/hi.html

# curl -H "Accept-Encoding: gzip" http://example.com

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

"Caching"

server {
        listen 80;
        server_name example.com;

        location / {
                root /var/www/websites/;
                index index.html index.htm;
        }

        location ~ \.(png) {
            root /var/www/websites/;
            add_header Cache-Control no-store;
        }
}

server {
        listen 80;
        server_name example.com;

        location / {
                root /var/www/websites/example;
                index index.html index.htm;
        }

        location ~ \.(png) {
            root /var/www/websites/example;
            expires 1h;
        }

        location ~ \.(txt) {
            root /var/www/websites/example;
            expires -1;
        }
}

server {
        listen 80;
        server_name example.com;

        location / {
                root /var/www/websites/example;
                index index.html index.htm;
        }

        location ~ \.(png) {
            root /var/www/websites/example;
        }

        location ~ \.(html) {
            root /var/www/websites/example;
            add_header Cache-Control private max-age=200;
            add_header Cache-Control public s-maxage=500;
            add_header Cache-Control no-cache must-revalidate;
        }
}

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------

"Access Control"

server {
    server_name example.com;

    location / {
        root /var/www/html/example;
    }

    location /admin {
        root /var/www/html/example;
        index index.html index.htm;
        allow [ip_address];
        deny all;
    }
}

server {
    server_name example.com;

    location / {
        root /var/www/html/example;
    }

    location /admin {
        root /var/www/html/example;
        index index.html index.htm;
        include /etc/nginx/conf.d/WhiteList;
        deny all;
    }
}

WhiteList

allow [ip_address];
allow [ip_address];

server {
    server_name example.com;

    location / {
        root /var/www/html/example;
        index index.html index.htm;
    }

    location /admin {
        root /var/www/html/example;
        index index.html index.htm;
        auth_basic " Basic Authentication ";
        auth_basic_user_file "/etc/nginx/.htpasswd";
    }
}

# cd /etc/nginx/
# htpasswd -c /etc/nginx/.htpasswd admin
New password:
Re-type new password:
Adding password for user admin

/etc/nginx/conf.d/default.conf

server {
    listen 80;
    server_name example.com;

    if ($deny_by_country) { return 403; }

    location / {
        root /var/www/html/example;
        index index.html index.htm;
    }
}

/etc/nginx/nginx.conf

http {
    geoip_country /usr/share/GeoIP/GeoIP.dat;
    map "$host:$geoip_country_code" $deny_by_country {
        ~^example.com:(?!IN) 1;
        default 0;
    }
}






















































